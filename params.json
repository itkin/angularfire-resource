{"name":"Angularfire-resource","tagline":"Resource factory built on top of AngularFire","body":"# angularfire-resource\r\nResource factory built on top of AngularFire\r\n>\r\n> This library is under active development and currently not production ready \r\n>\r\n>\r\n\r\n\r\n\r\n\r\nFireResource instances are extended [firebaseObject](https://www.firebase.com/docs/web/libraries/angular/api.html), so you'll find everything you're used to with angularfire, plus \r\n+ createdAt / updatedAt timestamps\r\n+ hooks (beforeCreate, afterCreate, beforeSave, afterSave)\r\n+ ensure an instance is not retrieved 2 times from firebase\r\n+ handle associations (hasOne and hasMany, returns respectively a firebaseObject instance or an association collection)\r\n\r\n\r\nAssociationCollection instances are extended [firebaseArray](https://www.firebase.com/docs/web/libraries/angular/api.html), plus \r\n+ they are made of FireResource instances\r\n+ they can preload some of their instances relations (using $include)\r\n+ they deal nicely with the fireUtil librairy for pagination & infinite scrolling work\r\n\r\n## Usage\r\n\r\nSet up your relations into a model layer\r\n\r\n```javascript\r\n\r\nangular.module('myApp', ['angularfire-resource'])\r\n\r\n  .factory('$firebase', function() {\r\n    return new Firebase('https://fireresourcetest.firebaseio.com/');\r\n  })\r\n\r\n  .factory('User', function(FireResource, $firebase) {\r\n    return FireResource($firebase.child('users'))\r\n      .hasMany('conversations')\r\n      .hasOne('displayedConversation', {className: 'Conversation', inverseOf: false, foreignKey: 'displayedConversationId' })\r\n  })\r\n  \r\n  .factory('Conversation', function(FireResource, $firebase) {\r\n    return FireResource($firebase.child('conversations'), function(){\r\n      this.hasMany('users');\r\n      this.hasMany('messages', {storedAt: 'createdAtDesc' }, function(baseRef, init){ // customize the way you store foreign keys collection to be able to sort data within a relation\r\n        init(new Firebase.util.Scroll(baseRef, '$value')).$next(5); // use firebase util to handle the pagination \r\n      });\r\n      this.beforeCreate(function(){        // hooks\r\n        this.createdAtDesc = - Date.now()\r\n      });\r\n    });\r\n  })\r\n  \r\n  .factory('Message', function(FireResource, $firebase) {\r\n    return FireResource($firebase.child('messages'), function(){\r\n      this.hasOne('user', { inverseOf: false }); // no message foreign key into the user model\r\n      this.hasOne('conversation');\r\n    });\r\n  })\r\n  \r\n```\r\n\r\nThe above code will maintain a deserialized data model with duplicated foreign keys, to allow security enforcement and easy admin queries.\r\n\r\n```\r\nroot\r\n|_ users\r\n| |_ userId1\r\n| | |_ displayedConversationId: conversationId1\r\n| | |_ conversations\r\n| |   |_ conversationId1: true\r\n| |_ userId2\r\n|   |_ conversations\r\n|     |_ conversationId1: true\r\n|\r\n|\r\n|_ conversations\r\n| |_ conversationId1\r\n|   |_users\r\n|   | |_ userId1: true\r\n|   | |_ userId2: true\r\n|   |_ messages\r\n|     |_ messageId1: aCustomValue \r\n|     |_ messageId2: aCustomValue\r\n|\r\n|\r\n|_ messages\r\n  |_ messageId1\r\n  | |_ userId: userId1\r\n  | |_ conversationId: conversationId1\r\n  |_ messageId2\r\n    |_ userId: userId2\r\n    |_ conversationId: conversationId1\r\n    \r\n```\r\n\r\nAnd now write some clean controllers :-)\r\n\r\n```javascript\r\nangular.module('myApp')\r\n\r\n  // $currentUser is an instance of User retrieved from a resolve\r\n  .controller('ExamplesController', function($scope, Message, $currentUser){\r\n    \r\n    // $query on all ( rootUrl/users ) \r\n    $scope.allUsers = User.$query()\r\n    \r\n    // $query on some customizing your ref\r\n    $scope.someUsers = User.$query(function(baseRef, init){\r\n      init(new Firebase.util.Scroll(baseRef, 'presence')).$next(10)\r\n    });\r\n    \r\n    // use $next and $prev to access the scroll instance of your custom ref (if used)\r\n    $scope.loadMoreUsers = function(){\r\n      $scope.someUsers.$next(10)\r\n    };\r\n\r\n    // preload associations\r\n    $scope.conversations = $currentUser.$conversations().$include('messages')\r\n    \r\n    $scope.newMessage = Message.$new()\r\n    $scope.saveMessage = function(){\r\n      angular.extend($scope.newMessage, { userId: $currentUser.$id });\r\n\r\n      //add an instance to a collection\r\n      $currentUser.$displayedConversation().$messages().$add($scope.newMessage)\r\n      $scope.newMessage = Message.$new();\r\n    };\r\n    \r\n    $scope.createConversationWith = function(user) {\r\n      // do sequential operations\r\n      return $currentUser.$conversations().$create()\r\n        .then(function (conversation) {\r\n          conversation.$users().$add(user);\r\n        })\r\n  })\r\n    \r\n```\r\n## Demo\r\n\r\nTo have a more in depth look over a practical case, check out the demo\r\n\r\nhttps://fireresourcetest.firebaseapp.com\r\n\r\n## Documentation\r\n\r\nIn progress [here](./doc/index.html)\r\n## TODO\r\n\r\n- Close the enhancement issues\r\n- Write a readme\r\n- Polish the demo\r\n- Code some testing\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}